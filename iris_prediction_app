
# *** Iris Prediction App With Streamlit ***
# *** Author : Masume.Azz ***

# *** Dependencies ***
# streamlit==0.88.0
# numpy==1.19.5
# pandas==1.3.4
# scikit-learn==1.0

import streamlit as st
import numpy as np
import pandas as pd

from sklearn import datasets
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LinearRegression

st.write("""
# simple Iris Flower Prediction App

This app predicts the Iris flower type!
""")
# Allow the user to choose between different algorithms or models
option = st.selectbox(
    'Select the algorithem or model to train Iris dataset ',
    ('Linear Regression', 'Random Forest Classifier'),
    index=1  # index 1 selects the second option ('Random Forest Classifier')
)

st.write('You have selected:', option)

# Set up the sidebar with the sliders to get user input
st.sidebar.header('User Input parameters')

def user_input_features():
    sepal_length = st.sidebar.slider('sepal_length',2.3,7.9, 5.4)
    sepal_width = st.sidebar.slider('sepal_width', 2.0, 4.4, 3.4)
    petal_length = st.sidebar.slider('petal_length', 1.0, 6.9, 1.3)
    petal_width = st.sidebar.slider('petal_width', 0.1, 2.5, 0.2)
    data = {'sepal_length': sepal_length,
            'sepal_width': sepal_width,
            'petal_length': petal_length,
            'petal_width':petal_width}
    features = pd.DataFrame(data, index=[0])
    return features

df = user_input_features()

st.subheader('User Input parameters')
st.write(df)

iris = datasets.load_iris()
X = iris.data
Y = iris.target

# Train the selected model based on the option selected
if option == 'Linear Regression':
    # Train a linear regression model
    clf = LinearRegression()
    clf.fit(X, Y)
    st.subheader('class labels and their corresponding index number')
    st.write(iris.target_names)
    prediction = clf.predict(df)
    st.subheader('prediction')
    st.write(iris.target_names[int(prediction)])
   

elif option == 'Random Forest Classifier':
    clf = RandomForestClassifier()
    clf.fit(X,Y)
    prediction_proba = clf.predict_proba(df)
    prediction = clf.predict(df)


    st.subheader('class labels and their corresponding index number')
    st.write(iris.target_names)

    st.subheader('prediction')
    st.write(iris.target_names[prediction])

    st.subheader('prediction probability')
    st.write(prediction_proba)
else:
    # Handle the case when no option is selected
    st.write('Please select an option') 
